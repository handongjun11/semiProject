/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2019-01-16 11:04:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import semi.kh.member.model.vo.*;
import semi.kh.product.model.vo.*;
import semi.kh.member.model.service.*;
import java.util.*;

public final class showAddress_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("semi.kh.member.model.vo");
    _jspx_imports_packages.add("semi.kh.product.model.vo");
    _jspx_imports_packages.add("semi.kh.member.model.service");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');


	List<Address> list = (List<Address>)request.getAttribute("list");
	String memberId = request.getParameter("memberId");
	

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>내 주소지</title>\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery-3.3.1.js\"></script>\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\">\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("function changeAddress(address){\n");
      out.write("\tvar frm = opener.document.showAddrFrm;\n");
      out.write("\tfrm.resAddress.value=address;\n");
      out.write("\t\n");
      out.write("\t//현재창을 제어\n");
      out.write("\tself.close();\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("<style>\n");
      out.write("#addrShow{\n");
      out.write("    width:260px;\n");
      out.write("    height:110px;\n");
      out.write("    color:black;\n");
      out.write("    font-size:20px;\n");
      out.write("    background-color:white;\n");
      out.write("    border:none;\n");
      out.write("    word-break:break-all;\n");
      out.write("    word-wrap:break-word;\n");
      out.write("}\n");
      out.write("#delAddr{\n");
      out.write("    width:68px;\n");
      out.write("    height:110px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
 if(list == null || list.isEmpty()) {
      out.write("\n");
      out.write("\t\t\t<div>주소지가 존재하지 않습니다.</div>\n");
      out.write("\t\t\t\n");
} else{
	for(Address addr : list){
      out.write("\n");
      out.write("\t <input type=\"button\" id=\"addrShow\" value=\"");
      out.print(addr.getAddress() );
      out.write("\" onclick=\"changeAddress('");
      out.print(addr.getAddress() );
      out.write("');\"/> \n");
      out.write("\t<button type=\"button\" id=\"delAddr\" class=\"btn btn-link\" name=\"address\" onclick=\"deleteAddress('");
      out.print(addr.getAddress() );
      out.write("');\">삭제</button> <br />\n");
      out.write("\t\n");
      out.write("\t");
}
	} 
      out.write("\n");
      out.write("\t\n");
      out.write("<script>\n");
      out.write("\t\n");
      out.write("function deleteAddress(address){\n");
      out.write("\t");
      out.write("\n");
      out.write("\t console.log(address);\n");
      out.write("\t var memberId=\"");
      out.print(memberId);
      out.write("\";\n");
      out.write("\t \n");
      out.write("\t\n");
      out.write("\t$.ajax({\n");
      out.write("\t\turl : \"");
      out.print(request.getContextPath());
      out.write("/product/deleteAddress.do\",\n");
      out.write("\t\tdata : \"memberId=\"+memberId+\"&address=\"+address, \n");
      out.write("\t\tsuccess : function(data){\n");
      out.write("\t\t\tlocation.href=\"");
      out.print(request.getContextPath());
      out.write("/product/showAddress?memberId=\"+memberId; \n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
